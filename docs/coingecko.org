# -*- org-src-preserve-indentation: t; -*-
#+title: Scrapper para CoinGecko
#+author: Eduardo Gomezcaña
#+property: header-args :tangle ../src/coingecko.py

* Librerías
No se requieren muchas librerías para realizar el /scrap/, basta uasr la
/requests/ para manejar las transacciones, /json/ para obtener objetos de las
cadenas con las que responde la /API/ y una serie de manejo de fechas para
organizar correctamente la información que se consulta.
#+begin_src python
import requests,json
from datetime import date, datetime, time, timedelta
#+end_src

* Clase base
** Declaración
Esencialmente el módulo define una clase, el scrapper de la API para CoinGecko.
Nada complicado en realidad.
#+begin_src python
class CoinGecko:
    """Clase muy simple para contactar con la API de CoinGecko"""
    token = None
#+end_src
** Constructor
CoinGecko tiene un sistema de tokens pero mientras no se requiera una gran
cantidad de transacciones, no se requiere. Se deja el esqueleto para implementar
el sistema de tokens considerando que las URLs de la API van a resultar
diferentes.
#+begin_src python
    def __init__ (self, user_token=None):
        self.token = user_token
#+end_src
* Métodos auxiliares
** Cálculo de fechas
Es útil saber qué semanas han sido completadas para obtener la lista de precios
completa. Para esto, esta función genera todos los inicios de semana (lunes)
desde el lunes inmediato anterior ~init~ hasta el lunes inmediato anterior de
una semana completa antes de ~end~. Esto quiere representar cada semana donde
toda la información ya está disponible desde ~init~ hasta ~end~.
#+begin_src python
    @staticmethod
    def _mondays_between (init, end):
        """Pequeña función que genera una lista con todos los lunes entre las
        fechas que se introducen"""

        days_since_monday_init = init.weekday()
        init_monday = init - timedelta(days=days_since_monday_init)

        days_since_monday_end = end.weekday()
        if days_since_monday_end >= 6:
            end_monday = end - timedelta(days=days_since_monday_end)
        else:
            end_monday = end - timedelta(days=days_since_monday_end + 7)

        weeks = (end_monday - init_monday).days // 7

        if weeks < 0:
            return []

        return [init_monday + timedelta(weeks=i) for i in range(weeks + 1)]
#+end_src
** Semana en curso
Es una pequeña función para generar todas las fechas de la semana dada la fecha
~current_date~. Es útil para la agrupación de precios.
#+begin_src python
    @staticmethod
    def _week_list (current_date):
        """Pequeña función que genera una lista con todos los elementos de la
        semana de la fecha que se proporciona"""

        current_monday = current_date - timedelta(days=current_date.weekday())
        current_week   = [current_monday + timedelta(days=i) for i in range(7)]

        return current_week
#+end_src
* Consulta de precios
** Último precio
Usando la información de la API de /CoinGecko/, se genera una /URL/ para hacer
la consulta del último precio reportado de la moneda indicada con ~coin_name~.
La respuesta se procesa para devolver un flotante.
#+begin_src python
    def last_price (self, coin_name):
        """Función para consulta el último precio registrado en la plataforma y
        devolverlo como float"""
        URL = f"https://api.coingecko.com/api/v3/simple/price?ids={coin_name}&vs_currencies=mxn"
        req = requests.get(URL)
        response = json.loads(req.text)
        return float(response[coin_name]["mxn"])
#+end_src
** Histórico
Usando la información de la /API/ de /CoinGecko/, se genera una /URL/ para hacer
la consulta histórica de una moneda con ~coin_name~ y usa como inicio la fecha
~init~ y fin la fecha ~end~. La respuesta se procesa para generar un diccionario
cuyas claves son las fechas (objetos del tipo fecha en /python/) y los valores
son los precios reportados por la respuesta.
#+begin_src python
    def price_history (self, init, end, coin_name):
        """Función para consultar los históricos y devolver un diccionario con
        las fechas de interés"""
        if end == init:
            return {}
        init_timestamp = int(datetime.combine(init, time.min).timestamp())
        end_timestamp = int(datetime.combine(end, time.min).timestamp())
        URL  = f"https://api.coingecko.com/api/v3/coins/{coin_name}/market_chart/range?"
        URL += f"vs_currency=mxn&from={init_timestamp}&to={end_timestamp}&precision=2"
        req  = requests.get(URL)
        response = json.loads(req.text)
        return {datetime.utcfromtimestamp(stamp/1000).date() : float(price)  for stamp, price in response["prices"]}
#+end_src

** Histórico ponderado
Para no consultar frecuentemente la /API/ es preferible almacenar la información
de manera local, pero registrar todos las fechas en un intervalo no es valioso
considerando que sólo quieren observarse tendencias cercanas. Para simplificar
los registros históricos, se aglutinan por semanas y se obtiene un promedio de
la información disponible por semana, para esto, se pide una fecha de inicio y
fin (~init~ y ~end~) y se calculan los lunes de las semanas que ya terminaron
más cercanas a cada una de estas fechas. Con esta información, se realiza una
consulta que incluya el rango especificado y se procesa para calcular las medias
de cada semana dejando como clave al lunes de cada semana al devolver el
diccionario.
#+begin_src python
    def weekly_mean_price_history (self, init, end, coin_name):
        """Función para consultar los históricos y devolver un diccionario
        únicamente con las fechas de interés"""
        mondays = self._mondays_between(init,end)

        if len(mondays) < 0 :
            return {}

        prices = self.price_history(init=mondays[0], end=mondays[-1], coin_name=coin_name)

        week_mean_prices = {}
        for monday in mondays:
            week_dates  = self._week_list(monday)
            week_prices = [ prices[day] for day in week_dates if day in prices and prices[day] != 0.0 ]
            mean_price = sum(week_prices)/len(week_prices) if len(week_prices) != 0 else 0.0
            week_mean_prices[monday] = mean_price

        return week_mean_prices
#+end_src
